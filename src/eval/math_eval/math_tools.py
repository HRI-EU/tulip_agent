#!/usr/bin/env python3
#
#  Copyright (c) 2024-2025, Honda Research Institute Europe GmbH
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  SPDX-License-Identifier: BSD-3-Clause
#
#
"""
Various Python functions for math tasks.
Generated by gpt-4 with the following prompt:

hey. please write 20 python functions for solving math tasks, e.g., add or subtract.
use sphinx documentation style without type documentation, add meaningful docstrings, and use python type hints

Rinse and repeat as necessary; note that gpt-4 seems to be lazy so simply increasing the number is insufficient.
"""
import math
import sys
from collections import Counter
from functools import reduce
from inspect import getmembers, isfunction


def add(a: float, b: float) -> float:
    """
    Add two numbers.

    :param a: The first number.
    :param b: The second number.
    :return: The sum of a and b.
    """
    return a + b


def subtract(a: float, b: float) -> float:
    """
    Subtract two numbers.

    :param a: The number to be subtracted from.
    :param b: The number to subtract.
    :return: The difference of a and b.
    """
    return a - b


def multiply(a: float, b: float) -> float:
    """
    Multiply two numbers.

    :param a: The first multiplicand.
    :param b: The second multiplicand.
    :return: The product of a and b.
    """
    return a * b


def divide(a: float, b: float) -> float:
    """
    Divide two numbers.

    :param a: The dividend.
    :param b: The divisor.
    :return: The quotient of a and b.
    """
    return a / b


def modulus(a: float, b: float) -> float:
    """
    Find the modulus of two numbers.

    :param a: The dividend.
    :param b: The divisor.
    :return: The remainder of the division of a by b.
    """
    return a % b


def power(base: float, exponent: float) -> float:
    """
    Raise a number to the power of another.

    :param base: The base number.
    :param exponent: The exponent.
    :return: The result of raising base to the power of exponent.
    """
    return base**exponent


def sqrt(number: float) -> float:
    """
    Calculate the square root of a number.

    :param number: The number to find the square root of.
    :return: The square root of the number.
    """
    return number**0.5


def absolute(number: float) -> float:
    """
    Find the absolute value of a number.

    :param number: The number to find the absolute value of.
    :return: The absolute value of the number.
    """
    return abs(number)


def factorial(number: int) -> int:
    """
    Calculate the factorial of a number.

    :param number: The number to find the factorial of.
    :return: The factorial of the number.
    """
    if number == 0:
        return 1
    else:
        return number * factorial(number - 1)


def gcd(a: int, b: int) -> int:
    """
    Compute the greatest common divisor of a and b.

    :param a: The first number.
    :param b: The second number.
    :return: The greatest common divisor of a and b.
    """
    while b:
        a, b = b, a % b
    return a


def lcm(a: int, b: int) -> int:
    """
    Compute the least common multiple of a and b.

    :param a: The first number.
    :param b: The second number.
    :return: The least common multiple of a and b.
    """
    return abs(a * b) // gcd(a, b)


def is_prime(number: int) -> bool:
    """
    Check if a number is prime.

    :param number: The number to check.
    :return: True if the number is prime, False otherwise.
    """
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True


def fibonacci_sequence(n: int) -> list:
    """
    Generate a list of Fibonacci numbers up to the nth number.

    :param n: The length of the Fibonacci sequence to generate.
    :return: A list containing the Fibonacci sequence up to the nth number.
    """
    sequence = [0, 1]
    for i in range(2, n):
        sequence.append(sequence[-1] + sequence[-2])
    return sequence[:n]


def prime_factors(number: int) -> list:
    """
    Find all prime factors of a number.

    :param number: The number to find the prime factors of.
    :return: A list of the prime factors of the number.
    """
    i = 2
    factors = []
    while i * i <= number:
        if number % i:
            i += 1
        else:
            number //= i
            factors.append(i)
    if number > 1:
        factors.append(number)
    return factors


def cosine(angle: float) -> float:
    """
    Calculate the cosine of an angle in radians.

    :param angle: The angle in radians.
    :return: The cosine of the angle.
    """
    return math.cos(angle)


def sine(angle: float) -> float:
    """
    Calculate the sine of an angle in radians.

    :param angle: The angle in radians.
    :return: The sine of the angle.
    """
    return math.sin(angle)


def tangent(angle: float) -> float:
    """
    Calculate the tangent of an angle in radians.

    :param angle: The angle in radians.
    :return: The tangent of the angle.
    """
    return math.tan(angle)


def log(number: float, base: float = math.e) -> float:
    """
    Calculate the logarithm of a number with given base.

    :param number: The number to calculate the logarithm for.
    :param base: The base of the logarithm. Defaults to Euler's number.
    :return: The logarithm of the number with the given base.
    """
    return math.log(number, base)


def radians_to_degrees(radians: float) -> float:
    """
    Convert radians to degrees.

    :param radians: The angle in radians.
    :return: The angle in degrees.
    """
    return math.degrees(radians)


def degrees_to_radians(degrees: float) -> float:
    """
    Convert degrees to radians.

    :param degrees: The angle in degrees.
    :return: The angle in radians.
    """
    return math.radians(degrees)


def hypotenuse(a: float, b: float) -> float:
    """
    Calculate the hypotenuse of a right-angled triangle.

    :param a: One side of the triangle.
    :param b: The other side of the triangle.
    :return: The length of the hypotenuse.
    """
    return math.sqrt(a**2 + b**2)


def area_circle(radius: float) -> float:
    """
    Calculate the area of a circle.

    :param radius: The radius of the circle.
    :return: The area of the circle.
    """
    return math.pi * radius**2


def circumference_circle(radius: float) -> float:
    """
    Calculate the circumference of a circle.

    :param radius: The radius of the circle.
    :return: The circumference of the circle.
    """
    return 2 * math.pi * radius


def area_rectangle(length: float, width: float) -> float:
    """
    Calculate the area of a rectangle.

    :param length: The length of the rectangle.
    :param width: The width of the rectangle.
    :return: The area of the rectangle.
    """
    return length * width


def perimeter_rectangle(length: float, width: float) -> float:
    """
    Calculate the perimeter of a rectangle.

    :param length: The length of the rectangle.
    :param width: The width of the rectangle.
    :return: The perimeter of the rectangle.
    """
    return 2 * (length + width)


def area_triangle(base: float, height: float) -> float:
    """
    Calculate the area of a triangle.

    :param base: The base of the triangle.
    :param height: The height of the triangle.
    :return: The area of the triangle.
    """
    return 0.5 * base * height


def perimeter_triangle(sides: list[float]) -> float:
    """
    Calculate the perimeter of a triange.

    :param sides: List of the lengths of the triangle's sides.
    :return: The perimeter of the triangle.
    """
    return sum(sides)


def quadratic_formula(a: float, b: float, c: float) -> tuple:
    """
    Solve a quadratic equation using the quadratic formula.

    :param a: The coefficient of x^2.
    :param b: The coefficient of x.
    :param c: The constant term.
    :return: A tuple containing the two solutions.
    """
    discriminant = math.sqrt(b**2 - 4 * a * c)
    x1 = (-b + discriminant) / (2 * a)
    x2 = (-b - discriminant) / (2 * a)
    return x1, x2


def perimeter_square(side_length: float) -> float:
    """
    Calculate the perimeter of a square.

    :param side_length: The length of a side of the square.
    :return: The perimeter of the square.
    """
    return 4 * side_length


def area_square(side_length: float) -> float:
    """
    Calculate the area of a square.

    :param side_length: The length of a side of the square.
    :return: The area of the square.
    """
    return side_length**2


def area_parallelogram(base: float, height: float) -> float:
    """
    Calculate the area of a parallelogram.

    :param base: The length of the base of the parallelogram.
    :param height: The height of the parallelogram.
    :return: The area of the parallelogram.
    """
    return base * height


def volume_cube(side_length: float) -> float:
    """
    Calculate the volume of a cube.

    :param side_length: The length of a side of the cube.
    :return: The volume of the cube.
    """
    return side_length**3


def volume_sphere(radius: float) -> float:
    """
    Calculate the volume of a sphere.

    :param radius: The radius of the sphere.
    :return: The volume of the sphere.
    """
    return (4 / 3) * math.pi * (radius**3)


def volume_cylinder(radius: float, height: float) -> float:
    """
    Calculate the volume of a cylinder.

    :param radius: The radius of the cylinder's base.
    :param height: The height of the cylinder.
    :return: The volume of the cylinder.
    """
    return math.pi * (radius**2) * height


def surface_area_of_cylinder(radius: float, height: float) -> float:
    """
    Calculate the surface area of a cylinder.

    :param radius: The radius of the cylinder's base.
    :param height: The height of the cylinder.
    :return: The surface area of the cylinder.
    """
    return 2 * radius**2 * math.pi + 2 * radius * math.pi * height


def volume_cone(radius: float, height: float) -> float:
    """
    Calculate the volume of a cone.

    :param radius: The radius of the cone's base.
    :param height: The height of the cone.
    :return: The volume of the cone.
    """
    return (1 / 3) * math.pi * (radius**2) * height


def surface_area_cube(side_length: float) -> float:
    """
    Calculate the surface area of a cube.

    :param side_length: The length of a side of the cube.
    :return: The surface area of the cube.
    """
    return 6 * (side_length**2)


def surface_area_sphere(radius: float) -> float:
    """
    Calculate the surface area of a sphere.

    :param radius: The radius of the sphere.
    :return: The surface area of the sphere.
    """
    return 4 * math.pi * (radius**2)


def nth_root(number: float, root: float) -> float:
    """
    Calculate the nth root of a number.

    :param number: The number to find the root of.
    :param root: The degree of the root.
    :return: The nth root of the number.
    """
    return number ** (1 / root)


def sum_of_natural_numbers(n: int) -> int:
    """
    Calculate the sum of the first n natural numbers.

    :param n: The number of terms.
    :return: The sum of the first n natural numbers.
    """
    return n * (n + 1) // 2


def sum_of_squares(n: int) -> int:
    """
    Calculate the sum of the squares of the first n natural numbers.

    :param n: The number of terms.
    :return: The sum of the squares of the first n natural numbers.
    """
    return n * (n + 1) * (2 * n + 1) // 6


def sum_of_cubes(n: int) -> int:
    """
    Calculate the sum of the cubes of the first n natural numbers.

    :param n: The number of terms.
    :return: The sum of the cubes, which is (n(n+1)/2)^2.
    """
    return (n * (n + 1) // 2) ** 2


def is_even(number: int) -> bool:
    """
    Check if a number is even.

    :param number: The number to check.
    :return: True if the number is even, False otherwise.
    """
    return number % 2 == 0


def is_odd(number: int) -> bool:
    """
    Check if a number is odd.

    :param number: The number to check.
    :return: True if the number is odd, False otherwise.
    """
    return number % 2 != 0


def sum_of_arithmetic_sequence(n: int, a1: float, d: float) -> float:
    """
    Calculate the sum of the first n terms of an arithmetic sequence.

    :param n: The number of terms.
    :param a1: The first term of the sequence.
    :param d: The common difference between terms.
    :return: The sum of the first n terms.
    """
    return n / 2 * (2 * a1 + (n - 1) * d)


def nth_term_arithmetic_sequence(n: int, a1: float, d: float) -> float:
    """
    Calculate the nth term of an arithmetic sequence.

    :param n: The term number to find.
    :param a1: The first term of the sequence.
    :param d: The common difference between terms.
    :return: The nth term of the sequence.
    """
    return a1 + (n - 1) * d


def sum_of_geometric_sequence(n: int, a1: float, r: float) -> float:
    """
    Calculate the sum of the first n terms of a geometric sequence.

    :param n: The number of terms.
    :param a1: The first term of the sequence.
    :param r: The common ratio between terms.
    :return: The sum of the first n terms.
    """
    if r == 1:
        return n * a1
    else:
        return a1 * (1 - r**n) / (1 - r)


def nth_term_geometric_sequence(n: int, a1: float, r: float) -> float:
    """
    Calculate the nth term of a geometric sequence.

    :param n: The term number to find.
    :param a1: The first term of the sequence.
    :param r: The common ratio between terms.
    :return: The nth term of the sequence.
    """
    return a1 * (r ** (n - 1))


def compound_interest(
    principal: float, rate: float, times_compounded: int, years: int
) -> float:
    """
    Calculate compound interest.

    :param principal: The initial amount of money.
    :param rate: The annual interest rate (as a decimal).
    :param times_compounded: The number of times the interest is compounded per year.
    :param years: The number of years the money is invested or borrowed for.
    :return: The amount of money accumulated after n years, including interest.
    """
    return principal * (1 + rate / times_compounded) ** (times_compounded * years)


def simple_interest(principal: float, rate: float, years: int) -> float:
    """
    Calculate simple interest.

    :param principal: The principal amount.
    :param rate: The annual interest rate (as a decimal).
    :param years: The time in years.
    :return: The simple interest generated.
    """
    return principal * rate * years


def convert_celsius_to_fahrenheit(celsius: float) -> float:
    """
    Convert temperature from Celsius to Fahrenheit.

    :param celsius: The temperature in Celsius.
    :return: The temperature in Fahrenheit.
    """
    return (celsius * 9 / 5) + 32


def convert_fahrenheit_to_celsius(fahrenheit: float) -> float:
    """
    Convert temperature from Fahrenheit to Celsius.

    :param fahrenheit: The temperature in Fahrenheit.
    :return: The temperature in Celsius.
    """
    return (fahrenheit - 32) * 5 / 9


def area_of_rhombus(diagonal1: float, diagonal2: float) -> float:
    """
    Calculate the area of a rhombus given its diagonals.

    :param diagonal1: The length of the first diagonal.
    :param diagonal2: The length of the second diagonal.
    :return: The area of the rhombus.
    """
    return 0.5 * diagonal1 * diagonal2


def perimeter_of_hexagon(side: float) -> float:
    """
    Calculate the perimeter of a regular hexagon.

    :param side: The length of a side of the hexagon.
    :return: The perimeter of the hexagon.
    """
    return 6 * side


def area_of_hexagon(side: float) -> float:
    """
    Calculate the area of a regular hexagon.

    :param side: The length of a side of the hexagon.
    :return: The area of the hexagon.
    """
    return (3 * math.sqrt(3) / 2) * (side**2)


def area_of_ellipse(major_axis: float, minor_axis: float) -> float:
    """
    Calculate the area of an ellipse.

    :param major_axis: The length of the major axis.
    :param minor_axis: The length of the minor axis.
    :return: The area of the ellipse.
    """
    return math.pi * (major_axis / 2) * (minor_axis / 2)


def perimeter_of_ellipse(major_axis: float, minor_axis: float) -> float:
    """
    Approximate the perimeter of an ellipse (Ramanujan's first approximation).

    :param major_axis: The length of the major axis.
    :param minor_axis: The length of the minor axis.
    :return: An approximation of the perimeter of the ellipse.
    """
    h = ((major_axis - minor_axis) ** 2) / ((major_axis + minor_axis) ** 2)
    return (
        math.pi
        * (major_axis + minor_axis)
        * (1 + (3 * h) / (10 + math.sqrt(4 - 3 * h)))
    )


def volume_of_prism(base_area: float, height: float) -> float:
    """
    Calculate the volume of a prism.

    :param base_area: The area of the base of the prism.
    :param height: The height of the prism.
    :return: The volume of the prism.
    """
    return base_area * height


def surface_area_of_prism(
    base_perimeter: float, base_area: float, height: float
) -> float:
    """
    Calculate the surface area of a prism.

    :param base_perimeter: The perimeter of the base of the prism.
    :param base_area: The area of the base.
    :param height: The height of the prism.
    :return: The surface area of the prism.
    """
    return 2 * base_area + base_perimeter * height


def volume_of_pyramid(base_area: float, height: float) -> float:
    """
    Calculate the volume of a pyramid.

    :param base_area: The area of the base of the pyramid.
    :param height: The height of the pyramid from the base to the apex.
    :return: The volume of the pyramid.
    """
    return (1 / 3) * base_area * height


def surface_area_of_pyramid(base_area: float, lateral_area: float) -> float:
    """
    Calculate the surface area of a pyramid.

    :param base_area: The area of the base of the pyramid.
    :param lateral_area: The total area of the lateral faces.
    :return: The total surface area of the pyramid.
    """
    return base_area + lateral_area


def volume_of_torus(major_radius: float, minor_radius: float) -> float:
    """
    Calculate the volume of a torus.

    :param major_radius: The major radius of the torus (distance from the center of the tube to the center of the torus).
    :param minor_radius: The minor radius of the torus (radius of the tube).
    :return: The volume of the torus.
    """
    return 2 * math.pi**2 * major_radius * minor_radius**2


def surface_area_of_torus(major_radius: float, minor_radius: float) -> float:
    """
    Calculate the surface area of a torus.

    :param major_radius: The major radius of the torus.
    :param minor_radius: The minor radius of the torus.
    :return: The surface area of the torus.
    """
    return 4 * math.pi**2 * major_radius * minor_radius


def harmonic_mean(numbers: list[float]) -> float:
    """
    Calculate the harmonic mean of a list of numbers.

    :param numbers: A list of numbers.
    :return: The harmonic mean.
    """
    return len(numbers) / sum(1 / x for x in numbers)


def geometric_mean(numbers: list[float]) -> float:
    """
    Calculate the geometric mean of a list of numbers.

    :param numbers: A list of numbers.
    :return: The geometric mean.
    """
    product = math.prod(numbers)
    return product ** (1 / len(numbers))


def euler_number_approximation(iterations: int) -> float:
    """
    Approximate Euler's number using a series expansion.

    :param iterations: The number of terms to include in the approximation.
    :return: An approximation of Euler's number.
    """
    return sum(1 / math.factorial(i) for i in range(iterations))


def is_perfect_number(number: int) -> bool:
    """
    Check if a number is a perfect number.

    :param number: The number to check.
    :return: True if the number is perfect, False otherwise.
    """
    divisors = [i for i in range(1, number) if number % i == 0]
    return sum(divisors) == number


def is_armstrong_number(number: int) -> bool:
    """
    Check if a number is an Armstrong number.

    :param number: The number to check.
    :return: True if the number is an Armstrong number, False otherwise.
    """
    num_str = str(number)
    num_len = len(num_str)
    return sum(int(digit) ** num_len for digit in num_str) == number


def nth_prime(n: int) -> int:
    """
    Find the nth prime number.

    :param n: The nth position.
    :return: The nth prime number.
    """
    prime_count = 0
    num = 1
    while prime_count < n:
        num += 1
        if is_prime(num):
            prime_count += 1
    return num


def pascals_triangle_row(n: int) -> list:
    """
    Generate the nth row of Pascal's triangle.

    :param n: The row number to generate.
    :return: A list representing the nth row of Pascal's triangle.
    """
    row = [1]
    for k in range(1, n + 1):
        row.append(row[k - 1] * (n - k + 1) // k)
    return row


def binomial_coefficient(n: int, k: int) -> int:
    """
    Calculate the binomial coefficient "n choose k".

    :param n: The number of items.
    :param k: The number of items to choose.
    :return: The binomial coefficient.
    """
    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))


def mean_absolute_deviation(numbers: list[float]) -> float:
    """
    Calculate the mean absolute deviation of a list of numbers.

    :param numbers: A list of numbers.
    :return: The mean absolute deviation.
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)


def standard_deviation(numbers: list[float]) -> float:
    """
    Calculate the standard deviation of a list of numbers.

    :param numbers: A list of numbers.
    :return: The standard deviation.
    """
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return math.sqrt(variance)


def variance(numbers: list[float]) -> float:
    """
    Calculate the variance of a list of numbers.

    :param numbers: A list of numbers.
    :return: The variance.
    """
    mean = sum(numbers) / len(numbers)
    return sum((x - mean) ** 2 for x in numbers) / len(numbers)


def coefficient_of_variation(numbers: list[float]) -> float:
    """
    Calculate the coefficient of variation of a list of numbers.

    :param numbers: A list of numbers.
    :return: The coefficient of variation.
    """
    stdev = standard_deviation(numbers)
    mean = sum(numbers) / len(numbers)
    return stdev / mean


def median(numbers: list[float]) -> float:
    """
    Calculate the median of a list of numbers.

    :param numbers: A list of sorted numbers.
    :return: The median.
    """
    numbers.sort()
    n = len(numbers)
    if n % 2 == 0:
        return (numbers[n // 2 - 1] + numbers[n // 2]) / 2
    else:
        return numbers[n // 2]


def mode(numbers: list[float]) -> list:
    """
    Calculate the mode(s) of a list of numbers.

    :param numbers: A list of numbers.
    :return: A list of modes.
    """
    counts = Counter(numbers)
    max_count = max(counts.values())
    return [num for num, count in counts.items() if count == max_count]


def interquartile_range(numbers: list[float]) -> float:
    """
    Calculate the interquartile range of a list of numbers.

    :param numbers: A list of sorted numbers.
    :return: The interquartile range.
    """

    numbers.sort()
    mid_index = len(numbers) // 2
    if len(numbers) % 2 == 0:
        q1 = median(numbers[:mid_index])
        q3 = median(numbers[mid_index:])
    else:
        q1 = median(numbers[:mid_index])
        q3 = median(numbers[mid_index + 1 :])
    return q3 - q1


def range_of_numbers(numbers: list[float]) -> float:
    """
    Calculate the range of a list of numbers.

    :param numbers: A list of numbers.
    :return: The range.
    """
    return max(numbers) - min(numbers)


def factorial_recursive(n: int) -> int:
    """
    Calculate the factorial of a number using recursion.

    :param n: The number.
    :return: The factorial of n.
    """
    if n == 0:
        return 1
    else:
        return n * factorial_recursive(n - 1)


def fibonacci_recursive(n: int) -> int:
    """
    Calculate the nth Fibonacci number using recursion.

    :param n: The position in the Fibonacci sequence.
    :return: The nth Fibonacci number.
    """
    if n <= 1:
        return n
    else:
        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)


def catalan_number(n: int) -> int:
    """
    Calculate the nth Catalan number.

    :param n: The position in the Catalan sequence.
    :return: The nth Catalan number.
    """
    return math.factorial(2 * n) // (factorial(n + 1) * factorial(n))


def is_palindrome(number: int) -> bool:
    """
    Check if a number is a palindrome.

    :param number: The number to check.
    :return: True if the number is a palindrome, False otherwise.
    """
    return str(number) == str(number)[::-1]


def sum_of_digits(number: int) -> int:
    """
    Calculate the sum of the digits of a number.

    :param number: The number.
    :return: The sum of its digits.
    """
    return sum(int(digit) for digit in str(number))


def digital_root(number: int) -> int:
    """
    Calculate the digital root of a number, which is the iterative process of summing the digits of a number,
    until a single-digit number is reached.

    :param number: The number to find the digital root of.
    :return: The digital root.
    """
    while number >= 10:
        number = sum(int(digit) for digit in str(number))
    return number


def gcd_extended(a: int, b: int) -> tuple:
    """
    Extended Euclidean Algorithm. It returns the coefficients of Bezout's identity and the greatest common divisor.

    :param a: First number.
    :param b: Second number.
    :return: A tuple containing the coefficients of Bezout's identity and the gcd of a and b.
    """
    if a == 0:
        return b, 0, 1
    else:
        g, x, y = gcd_extended(b % a, a)
        return g, y - (b // a) * x, x


def lcm_extended(a: int, b: int) -> int:
    """
    Calculate the Least Common Multiple (LCM) based on the GCD.

    :param a: First number.
    :param b: Second number.
    :return: The LCM of a and b.
    """
    return abs(a * b) // gcd_extended(a, b)[0]


def sum_of_n_squares(n: int) -> int:
    """
    Calculate the sum of the squares of the first n natural numbers.

    :param n: The number of terms.
    :return: The sum of squares.
    """
    return n * (n + 1) * (2 * n + 1) // 6


def sum_of_n_cubes(n: int) -> int:
    """
    Calculate the sum of the cubes of the first n natural numbers.

    :param n: The number of terms.
    :return: The sum of cubes.
    """
    return (n * (n + 1) // 2) ** 2


def pythagorean_triples(n: int) -> list:
    """
    Generate all Pythagorean triples up to a maximum value n.

    :param n: The maximum value of the hypotenuse.
    :return: A list of tuples representing the Pythagorean triples.
    """
    triples = []
    for c in range(1, n + 1):
        for b in range(1, c):
            for a in range(1, b):
                if a * a + b * b == c * c:
                    triples.append((a, b, c))
    return triples


def prime_sieve(n: int) -> list:
    """
    Sieve of Eratosthenes: Find all prime numbers up to n.

    :param n: The upper limit to find primes within.
    :return: A list of prime numbers up to n.
    """
    sieve = [True] * (n + 1)
    primes = []
    for p in range(2, n + 1):
        if sieve[p]:
            primes.append(p)
            for i in range(p * p, n + 1, p):
                sieve[i] = False
    return primes


def euler_totient_function(n: int) -> int:
    """
    Calculate Euler's Totient Function for a given n, which is the count of numbers less than n that are relatively prime to n.

    :param n: The input number.
    :return: The count of numbers less than n that are relatively prime to n.
    """
    result = n
    p = 2
    while p * p <= n:
        if n % p == 0:
            while n % p == 0:
                n //= p
            result -= result // p
        p += 1
    if n > 1:
        result -= result // n
    return result


def greatest_difference(numbers: list[float]) -> float:
    """
    Find the greatest difference between any two numbers in a list.

    :param numbers: A list of numbers.
    :return: The greatest difference.
    """
    return max(numbers) - min(numbers)


def sum_of_even_numbers(numbers: list[int]) -> int:
    """
    Calculate the sum of all even numbers in a list.

    :param numbers: A list of numbers.
    :return: The sum of all even numbers.
    """
    return sum(number for number in numbers if number % 2 == 0)


def sum_of_odd_numbers(numbers: list[int]) -> int:
    """
    Calculate the sum of all odd numbers in a list.

    :param numbers: A list of numbers.
    :return: The sum of all odd numbers.
    """
    return sum(number for number in numbers if number % 2 != 0)


def product_of_numbers(numbers: list[float]) -> float:
    """
    Calculate the product of all numbers in a list.

    :param numbers: A list of numbers.
    :return: The product of all numbers.
    """
    return reduce((lambda x, y: x * y), numbers)


def is_prime_number(n: int) -> bool:
    """
    Determine if a number is a prime number.

    :param n: The number to check.
    :return: True if n is a prime number, False otherwise.
    """
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


def primes_up_to_n(n: int) -> list:
    """
    Generate a list of prime numbers up to a given number n.

    :param n: The upper limit of the prime number search.
    :return: A list of prime numbers up to n.
    """
    primes = []
    for possible_prime in range(2, n + 1):
        # Assume number is prime until shown it is not.
        _is_prime = True
        for num in range(2, int(possible_prime**0.5) + 1):
            if possible_prime % num == 0:
                _is_prime = False
                break
        if _is_prime:
            primes.append(possible_prime)
    return primes


def number_of_divisors(n: int) -> int:
    """
    Calculate the number of divisors of a number.

    :param n: The number.
    :return: The number of divisors of n.
    """
    divisors = 0
    for i in range(1, n + 1):
        if n % i == 0:
            divisors += 1
    return divisors


def sum_of_divisors(n: int) -> int:
    """
    Calculate the sum of all divisors of a number, including itself.

    :param n: The number.
    :return: The sum of all divisors of n.
    """
    return sum(i for i in range(1, n + 1) if n % i == 0)


if __name__ == "__main__":
    current_module = sys.modules[__name__]
    print(current_module)
    functions = [
        (n, f)
        for n, f in getmembers(current_module, isfunction)
        if f.__module__ == "__main__"
    ]
    print(f"Number of functions: {len(functions)}")
    print(f"Functions: {functions}")
    print(f"Number of duplicate functions: {len(functions) - len(set(functions))}")

    from tulip_agent.function_analyzer import FunctionAnalyzer

    fa = FunctionAnalyzer()
    for name, function in functions:
        print(name)
        description = fa.analyze_function(function)
        print(description)
